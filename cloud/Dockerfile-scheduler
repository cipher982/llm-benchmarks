# syntax=docker/dockerfile:1.6
FROM python:3.11-slim

# Environment
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH="/app/api:$PYTHONPATH"

# System deps (curl for healthcheck, git for vcs installs if ever needed)
RUN apt-get update && apt-get install -y --no-install-recommends \
      curl git \
    && rm -rf /var/lib/apt/lists/*

# Install uv (fast Python package manager)
ENV UV_INSTALL_DIR=/root/.local/bin
RUN curl -LsSf https://astral.sh/uv/install.sh | sh && \
    ln -s /root/.local/bin/uv /usr/local/bin/uv

WORKDIR /app

# Leverage layer caching: copy only dependency manifests first
COPY pyproject.toml ./
COPY uv.lock ./
COPY api /app/api

# Create project venv and install dependencies (lockfile is mandatory)
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --no-dev --frozen

# Ensure venv binaries are first on PATH
ENV PATH="/app/.venv/bin:$PATH"

# Create log file for benchmark output
RUN touch /var/log/benchmark.log

# Health check - verify log file exists and is being written to
HEALTHCHECK --interval=60s --timeout=10s --start-period=30s --retries=3 \
  CMD test -f /var/log/benchmark.log || exit 1

# Default CMD - can be overridden by docker-compose
CMD ["sh", "-c", "while true; do cd /app && python api/run_cloud.py --providers all --run-always >> /var/log/benchmark.log 2>&1; sleep 1800; done"]